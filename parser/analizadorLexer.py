# Generated from analizador.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,222,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,
        1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,
        1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,4,30,179,8,30,
        11,30,12,30,180,1,30,1,30,4,30,185,8,30,11,30,12,30,186,3,30,189,
        8,30,1,31,1,31,5,31,193,8,31,10,31,12,31,196,9,31,1,32,1,32,5,32,
        200,8,32,10,32,12,32,203,9,32,1,32,1,32,1,33,4,33,208,8,33,11,33,
        12,33,209,1,33,1,33,1,34,1,34,5,34,216,8,34,10,34,12,34,219,9,34,
        1,34,1,34,0,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,1,0,6,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,
        0,10,10,13,13,228,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,1,71,1,0,0,0,3,75,1,0,0,0,5,81,1,0,0,0,7,84,1,0,0,
        0,9,89,1,0,0,0,11,97,1,0,0,0,13,104,1,0,0,0,15,108,1,0,0,0,17,114,
        1,0,0,0,19,119,1,0,0,0,21,126,1,0,0,0,23,131,1,0,0,0,25,137,1,0,
        0,0,27,139,1,0,0,0,29,141,1,0,0,0,31,143,1,0,0,0,33,145,1,0,0,0,
        35,147,1,0,0,0,37,149,1,0,0,0,39,151,1,0,0,0,41,153,1,0,0,0,43,155,
        1,0,0,0,45,157,1,0,0,0,47,159,1,0,0,0,49,161,1,0,0,0,51,163,1,0,
        0,0,53,165,1,0,0,0,55,168,1,0,0,0,57,171,1,0,0,0,59,174,1,0,0,0,
        61,178,1,0,0,0,63,190,1,0,0,0,65,197,1,0,0,0,67,207,1,0,0,0,69,213,
        1,0,0,0,71,72,5,102,0,0,72,73,5,111,0,0,73,74,5,114,0,0,74,2,1,0,
        0,0,75,76,5,119,0,0,76,77,5,104,0,0,77,78,5,105,0,0,78,79,5,108,
        0,0,79,80,5,101,0,0,80,4,1,0,0,0,81,82,5,105,0,0,82,83,5,102,0,0,
        83,6,1,0,0,0,84,85,5,101,0,0,85,86,5,108,0,0,86,87,5,115,0,0,87,
        88,5,101,0,0,88,8,1,0,0,0,89,90,5,109,0,0,90,91,5,111,0,0,91,92,
        5,115,0,0,92,93,5,116,0,0,93,94,5,114,0,0,94,95,5,97,0,0,95,96,5,
        114,0,0,96,10,1,0,0,0,97,98,5,114,0,0,98,99,5,101,0,0,99,100,5,116,
        0,0,100,101,5,117,0,0,101,102,5,114,0,0,102,103,5,110,0,0,103,12,
        1,0,0,0,104,105,5,105,0,0,105,106,5,110,0,0,106,107,5,116,0,0,107,
        14,1,0,0,0,108,109,5,102,0,0,109,110,5,108,0,0,110,111,5,111,0,0,
        111,112,5,97,0,0,112,113,5,116,0,0,113,16,1,0,0,0,114,115,5,98,0,
        0,115,116,5,111,0,0,116,117,5,111,0,0,117,118,5,108,0,0,118,18,1,
        0,0,0,119,120,5,115,0,0,120,121,5,116,0,0,121,122,5,114,0,0,122,
        123,5,105,0,0,123,124,5,110,0,0,124,125,5,103,0,0,125,20,1,0,0,0,
        126,127,5,116,0,0,127,128,5,114,0,0,128,129,5,117,0,0,129,130,5,
        101,0,0,130,22,1,0,0,0,131,132,5,102,0,0,132,133,5,97,0,0,133,134,
        5,108,0,0,134,135,5,115,0,0,135,136,5,101,0,0,136,24,1,0,0,0,137,
        138,5,59,0,0,138,26,1,0,0,0,139,140,5,40,0,0,140,28,1,0,0,0,141,
        142,5,41,0,0,142,30,1,0,0,0,143,144,5,123,0,0,144,32,1,0,0,0,145,
        146,5,125,0,0,146,34,1,0,0,0,147,148,5,61,0,0,148,36,1,0,0,0,149,
        150,5,44,0,0,150,38,1,0,0,0,151,152,5,42,0,0,152,40,1,0,0,0,153,
        154,5,47,0,0,154,42,1,0,0,0,155,156,5,37,0,0,156,44,1,0,0,0,157,
        158,5,43,0,0,158,46,1,0,0,0,159,160,5,45,0,0,160,48,1,0,0,0,161,
        162,5,60,0,0,162,50,1,0,0,0,163,164,5,62,0,0,164,52,1,0,0,0,165,
        166,5,60,0,0,166,167,5,61,0,0,167,54,1,0,0,0,168,169,5,62,0,0,169,
        170,5,61,0,0,170,56,1,0,0,0,171,172,5,61,0,0,172,173,5,61,0,0,173,
        58,1,0,0,0,174,175,5,33,0,0,175,176,5,61,0,0,176,60,1,0,0,0,177,
        179,7,0,0,0,178,177,1,0,0,0,179,180,1,0,0,0,180,178,1,0,0,0,180,
        181,1,0,0,0,181,188,1,0,0,0,182,184,5,46,0,0,183,185,7,0,0,0,184,
        183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,
        189,1,0,0,0,188,182,1,0,0,0,188,189,1,0,0,0,189,62,1,0,0,0,190,194,
        7,1,0,0,191,193,7,2,0,0,192,191,1,0,0,0,193,196,1,0,0,0,194,192,
        1,0,0,0,194,195,1,0,0,0,195,64,1,0,0,0,196,194,1,0,0,0,197,201,5,
        34,0,0,198,200,8,3,0,0,199,198,1,0,0,0,200,203,1,0,0,0,201,199,1,
        0,0,0,201,202,1,0,0,0,202,204,1,0,0,0,203,201,1,0,0,0,204,205,5,
        34,0,0,205,66,1,0,0,0,206,208,7,4,0,0,207,206,1,0,0,0,208,209,1,
        0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,211,1,0,0,0,211,212,6,
        33,0,0,212,68,1,0,0,0,213,217,5,35,0,0,214,216,8,5,0,0,215,214,1,
        0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,1,
        0,0,0,219,217,1,0,0,0,220,221,6,34,0,0,221,70,1,0,0,0,8,0,180,186,
        188,194,201,209,217,1,6,0,0
    ]

class analizadorLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FOR = 1
    WHILE = 2
    IF = 3
    ELSE = 4
    PRINT = 5
    RETURN = 6
    INT = 7
    FLOAT = 8
    BOOL = 9
    STRING_T = 10
    TRUE = 11
    FALSE = 12
    SEMICOL = 13
    LPAREN = 14
    RPAREN = 15
    LBRACE = 16
    RBRACE = 17
    ASSIGN = 18
    COMMA = 19
    MUL = 20
    DIV = 21
    MOD = 22
    ADD = 23
    SUB = 24
    LT = 25
    GT = 26
    LEQ = 27
    GEQ = 28
    EQ = 29
    NEQ = 30
    NUM = 31
    ID = 32
    STRING = 33
    WS = 34
    COMMENT = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'for'", "'while'", "'if'", "'else'", "'mostrar'", "'return'", 
            "'int'", "'float'", "'bool'", "'string'", "'true'", "'false'", 
            "';'", "'('", "')'", "'{'", "'}'", "'='", "','", "'*'", "'/'", 
            "'%'", "'+'", "'-'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "FOR", "WHILE", "IF", "ELSE", "PRINT", "RETURN", "INT", "FLOAT", 
            "BOOL", "STRING_T", "TRUE", "FALSE", "SEMICOL", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "ASSIGN", "COMMA", "MUL", "DIV", "MOD", 
            "ADD", "SUB", "LT", "GT", "LEQ", "GEQ", "EQ", "NEQ", "NUM", 
            "ID", "STRING", "WS", "COMMENT" ]

    ruleNames = [ "FOR", "WHILE", "IF", "ELSE", "PRINT", "RETURN", "INT", 
                  "FLOAT", "BOOL", "STRING_T", "TRUE", "FALSE", "SEMICOL", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "ASSIGN", "COMMA", 
                  "MUL", "DIV", "MOD", "ADD", "SUB", "LT", "GT", "LEQ", 
                  "GEQ", "EQ", "NEQ", "NUM", "ID", "STRING", "WS", "COMMENT" ]

    grammarFileName = "analizador.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


